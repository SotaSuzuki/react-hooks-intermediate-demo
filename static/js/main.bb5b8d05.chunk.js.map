{"version":3,"sources":["Views/Demo.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["Main","useState","fetching","setFetching","style","maxWidth","margin","className","disabled","onClick","evt","preventDefault","setTimeout","HeaderBar","flex","height","viewBox","version","width","aria-hidden","fillRule","d","to","Demo","Home","src","logo","alt","App","default","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"oSAcA,SAASA,IAAQ,IAAD,EACkBC,oBAAS,GAD3B,mBACPC,EADO,KACGC,EADH,KAUd,OACE,0BAAMC,MAAO,CAAEC,SAAU,IAAKC,OAAQ,WACpC,4BACEC,UAAU,WACVC,SAAUN,EACVO,QAbyB,SAAAC,GAC7BA,EAAIC,iBACJR,GAAY,GACZS,YAAW,WACTT,GAAY,KACX,OAUED,EACC,oCACE,0CACA,0BAAMK,UAAU,sBAGlB,8CAOV,SAASM,IACP,OACE,yBAAKN,UAAU,UACb,yBACEA,UAAU,8BACVH,MAAO,CAAEC,SAAU,IAAKS,KAAM,WAAYR,OAAQ,WAElD,yBAAKC,UAAU,eACb,yBAAKA,UAAU,+BACb,yBACEQ,OAAO,KACPR,UAAU,mCACVS,QAAQ,YACRC,QAAQ,MACRC,MAAM,KACNC,cAAY,QAEZ,0BACEC,SAAS,UACTC,EAAE,gkBAGN,6BACE,yBAAKd,UAAU,MAAf,wBACA,yBAAKA,UAAU,iBAAf,mBAKN,yBAAKA,UAAU,gBACb,6BACE,kBAAC,IAAD,CAAMA,UAAU,cAAce,GAAG,KAAjC,YAUGC,MAhFf,WACE,OACE,oCACE,kBAACV,EAAD,MACA,kBAACb,EAAD,QCQN,SAASwB,IACP,OACE,yBAAKjB,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKkB,IAAKC,IAAMnB,UAAU,WAAWoB,IAAI,SACzC,kBAAC,IAAD,CAAML,GAAG,QAAQf,UAAU,YAA3B,UAQOqB,MAxBf,WACE,OACE,oCACE,kBAAC,IAAD,KACE,kBAACJ,EAAD,CAAMK,SAAO,EAACC,KAAK,MACnB,kBAAC,EAAD,CAAMA,KAAK,aCCCC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,kBErInBC,EAAOC,QAAU,IAA0B,kC","file":"static/js/main.bb5b8d05.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { Link } from '@reach/router';\nimport '@primer/css/header/index.scss';\nimport '@primer/css/loaders/index.scss';\n\nfunction Demo() {\n  return (\n    <>\n      <HeaderBar />\n      <Main />\n    </>\n  );\n}\n\nfunction Main() {\n  const [fetching, setFetching] = useState(false);\n  const handleClickFetchButton = evt => {\n    evt.preventDefault();\n    setFetching(true);\n    setTimeout(() => {\n      setFetching(false);\n    }, 2000);\n  };\n\n  return (\n    <main style={{ maxWidth: 800, margin: '0 auto' }}>\n      <button\n        className=\"btn mt-3\"\n        disabled={fetching}\n        onClick={handleClickFetchButton}\n      >\n        {fetching ? (\n          <>\n            <span>Fetching</span>\n            <span className=\"AnimatedEllipsis\"></span>\n          </>\n        ) : (\n          <span>Fetch Data</span>\n        )}\n      </button>\n    </main>\n  );\n}\n\nfunction HeaderBar() {\n  return (\n    <div className=\"Header\">\n      <div\n        className=\"d-flex flex-justify-between\"\n        style={{ maxWidth: 800, flex: '1 1 auto', margin: '0 auto' }}\n      >\n        <div className=\"Header-item\">\n          <div className=\"f4 d-flex flex-items-center\">\n            <svg\n              height=\"32\"\n              className=\"octicon octicon-mark-github mr-2\"\n              viewBox=\"0 0 16 16\"\n              version=\"1.1\"\n              width=\"32\"\n              aria-hidden=\"true\"\n            >\n              <path\n                fillRule=\"evenodd\"\n                d=\"M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.013 8.013 0 0 0 16 8c0-4.42-3.58-8-8-8z\"\n              ></path>\n            </svg>\n            <div>\n              <div className=\"f4\">React Hooks API Demo</div>\n              <div className=\"f6 text-green\">intermediate</div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"Header-item \">\n          <nav>\n            <Link className=\"Header-link\" to=\"/\">\n              Back\n            </Link>\n          </nav>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Demo;\n","import React from 'react';\nimport logo from './logo.svg';\nimport { Link, Router } from '@reach/router';\nimport './App.scss';\nimport Demo from './Views/Demo';\n\nfunction App() {\n  return (\n    <>\n      <Router>\n        <Home default path=\"/\" />\n        <Demo path=\"/demo\" />\n      </Router>\n    </>\n  );\n}\n\nfunction Home() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <Link to=\"/demo\" className=\"btn mt-2\">\n          Demo\n        </Link>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}